import io
import time
from pyquery import PyQuery as pq
from io import BytesIO
import logging
from PIL import Image
import random, base64, re
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import Select

from selenium import webdriver

import time

class CrackGeetest:
    def __init__(self, url, user, pwd, bowtonID):
        self.url = url
        self.user = user
        self.pwd = pwd
        self.proxy = None
        chrome_options = Options()
        # chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        self.browser = webdriver.Firefox(options=chrome_options, executable_path='.\geckodriver.exe')
        self.wait = WebDriverWait(self.browser, 60)
        self.browser.set_page_load_timeout(30)
        self.bowtonID = bowtonID
        self.threshold = 60  # 验证码图片对比中RGB的差值，可调
        self.left = 35  # 验证码图片的对比中的起始坐标，即拖动模块的右边线位置
        self.deviation = 4  # 误差值，这个值是多次测试得出的经验值
        self.page_count = []

    def inputinfo(self):
        """
        # 打开浏览器,登录
        """
        self.browser.maximize_window()
        self.browser.get(self.url)
        self.browser.implicitly_wait(10)  # 隐式等待
        # if '无法访问此网站' in self.browser.page_source:
        #     self.browser.quit()

        # ===============点击弹窗===================开始
        WebDriverWait(self.browser, 20).until(EC.alert_is_present())
        alert = self.browser.switch_to.alert
        alert.accept()

        # ===============输入信息===================开始
        user = self.wait.until(EC.presence_of_element_located((By.ID, "email")))
        pwd = self.wait.until(EC.presence_of_element_located((By.ID, "passwd")))
        try:
            user.send_keys(self.user)
        except:
            user.send_keys(self.user)
        time.sleep(0.1)
        try:
            pwd.send_keys(self.pwd)
        except:
            pwd.send_keys(self.pwd)

    def get_slider(self, x):
        """
        获取滑块
        :return: 滑块对象
        """
        if x == 1:
            slider = self.wait.until(
                EC.element_to_be_clickable((By.CLASS_NAME, 'geetest_btn')))  # geetest_slider_button
            return slider
        elif x == 2:
            slider = self.wait.until(
                EC.element_to_be_clickable((By.CLASS_NAME, 'geetest_slider_button')))  # geetest_slider_button
            return slider

    def get_image(self):
        """
        从网页的网站截图中，截取验证码图片
        :return: 验证码图片对象
        """
        times = random.uniform(3, 5)
        times = round(times, 2)
        time.sleep(times)
        bg_js = 'return document.getElementsByClassName("geetest_canvas_bg geetest_absolute")[0].toDataURL("image/png");'
        fullbg_js = 'return document.getElementsByClassName("geetest_canvas_fullbg geetest_fade geetest_absolute")[0].toDataURL("image/png");'
        # slice 执行 JS 代码并拿到图片 base64 数据
        bg_info = self.browser.execute_script(bg_js)  # 执行js文件得到带图片信息的图片数据
        bg_base64 = bg_info.split(',')[1]  # 拿到base64编码的图片信息
        bg_bytes = base64.b64decode(bg_base64)  # 转为bytes类型
        bg_image = Image.open(BytesIO(bg_bytes))  # image读取图片信息
        fullbg_info = self.browser.execute_script(fullbg_js)  # 执行js文件得到带图片信息的图片数据
        fullbg_base64 = fullbg_info.split(',')[1]  # 拿到base64编码的图片信息
        fullbg_bytes = base64.b64decode(fullbg_base64)  # 转为bytes类型
        fullbg_image = Image.open(BytesIO(fullbg_bytes))  # image读取图片信息
        return bg_image, fullbg_image

    # 获取拼图和完整图像之间的差异并获取不同像素之间的距离
    def get_distance(self, img1, img2):
        for x in range(self.left, img1.size[0]):
            for y in range(img1.size[1]):
                rgb1 = img1.getpixel((x, y))
                rgb2 = img2.getpixel((x, y))

                diff_r = abs(rgb1[0] - rgb2[0])
                diff_g = abs(rgb1[1] - rgb2[1])
                diff_b = abs(rgb1[2] - rgb2[2])

                if diff_r > self.threshold or diff_g > self.threshold or diff_b > self.threshold:
                    return x - self.deviation
        logging.debug('未识别出验证码中的不同位置，或图片定位出现异常')
        return 0  #

    # def get_distance(self, image1, image2):
    #     """
    #     拿到滑动验证码需要移动的距离
    #     :param image1: 没有缺口的图片对象
    #     :param image2: 带缺口的图片对象
    #     :return: 需要移动的距离
    #     """
    #     for i in range(self.left, image1.size[0]):
    #         for j in range(image1.size[1]):
    #             rgb1 = image1.load()[i, j]
    #             rgb2 = image2.load()[i, j]
    #             res1 = abs(rgb1[0] - rgb2[0])
    #             res2 = abs(rgb1[1] - rgb2[1])
    #             res3 = abs(rgb1[2] - rgb2[2])
    #             if not (res1 < self.threshold and res2 < self.threshold and res3 < self.threshold):
    #                 distance = i - self.deviation
    #                 return distance
    #     logging.debug('未识别出验证码中的不同位置，或图片定位出现异常')
    #     return 0  # 如果没有识别出不同位置，则象征性的滑动，以刷新下一张验证码

    def get_track(self, distance):
        """
        根据偏移量获取移动轨迹
        :param distance: 偏移量
        :return: 移动轨迹
        """
        # 移动轨迹
        track = []
        # 当前位移
        current = 0
        # 减速阈值
        mid = distance * 4 / 5
        # 计算间隔
        t = 0.2
        # 初速度
        v = 0
        # 多往右移动10长度
        distance += 10
        while current < distance:
            if current < mid:
                # 加速度为随机数
                a = 2
            else:
                # 加速度为随机负数
                a = -3
            # 初速度v0
            v0 = v
            # 当前速度v = v0 + at
            v = v0 + a * t
            # 移动距离x = v0t + 1/2 * a * t^2
            move = v0 * t + 1 / 2 * a * t * t
            # 当前位移
            current += move
            # 加入轨迹
            track.append(round(move))
        # 加入往回移动轨迹
        for i in range(3):
            track.append(-2)
        for i in range(4):
            track.append(-1)
        return track

    # def get_track(self, distance):
    #     """
    #     :param distance:
    #     :return: 滑动轨迹
    #     """
    #     track = []
    #     current = 0
    #     mid = int(distance * round(random.uniform(0.6, 0.7), 2))
    #     jiansu = distance - mid  # 需要减速的距离
    #     # 计算间隔
    #     t = 0.2
    #     # 初速度
    #     v = 0
    #     while current < distance:
    #         if current < mid:
    #             # 设置加速度动态变化
    #             # 浏览器的加速度
    #             ap = random.uniform(3, 5)
    #             times = round(ap, 2)
    #             a = times
    #             # 初速度v0
    #             v0 = v
    #             v = v0 + a * t
    #             move = v0 * t + 1 / 2 * a * t * t + 0.5
    #             # 当前位移
    #             current += move
    #             # 加入轨迹
    #             track.append(round(move))
    #         else:
    #             a = -1 * (v * v) / (2 * jiansu)
    #             v0 = v
    #             v = v0 + a * t
    #             if distance > 120:
    #                 move = v0 * t + 1 / 2 * a * t * t - 1.5
    #             elif distance <= 120 and distance >= 60:
    #                 move = v0 * t + 1 / 2 * a * t * t - 1
    #             else:
    #                 move = v0 * t + 1 / 2 * a * t * t - 0.5
    #             if move < 1:
    #                 move = 1
    #             current += move
    #             track.append(round(move))
    #     return track

    def move_to_gap(self, slider, track):
        """
        拖动滑块到缺口处
        :param slider: 滑块
        :param track: 轨迹
        :return:
        """
        ActionChains(self.browser).click_and_hold(slider).perform()
        for x in track:
            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=0).perform()
        time.sleep(0.4)
        ActionChains(self.browser).release().perform()

    def check_yanzheng(self):
        if self.browser.execute_script("typeof validat") is None:
            return False
        else:
            return True

    def again_crack(self):
        image1, image2 = self.get_image()
        distance = self.get_distance(image1, image2)
        print(distance)
        track = self.get_track(distance)
        print(track)
        slider = self.get_slider(2)
        self.move_to_gap(slider, track)
        time.sleep(0.12)
        ActionChains(self.browser).move_by_offset(xoffset=-3, yoffset=0).perform()
        ActionChains(self.browser).move_by_offset(xoffset=3, yoffset=0).perform()
        time.sleep(0.21)
        ActionChains(self.browser).release().perform()
        times = random.uniform(2, 4)
        times = round(times, 1)
        time.sleep(times)
        html = self.browser.page_source
        res = self.check_yanzheng()
        print('检测html是否滑动成功', res)
        if res == True:
            input("成功！")
        else:
            raise print('滑动失败')

    def crack(self):
        self.inputinfo()
        button = self.get_slider(1)
        button.click()
        image1, image2 = self.get_image()  # 获取图片
        distance = self.get_distance(image1, image2)  # 获得滑动距离
        print("距离", distance)
        track = self.get_track(distance)  # 滑动轨迹数组
        print("轨迹", track)
        slider = self.get_slider(2)
        self.move_to_gap(slider, track)
        time.sleep(0.12)
        ActionChains(self.browser).move_by_offset(xoffset=-3, yoffset=0).perform()
        ActionChains(self.browser).move_by_offset(xoffset=3, yoffset=0).perform()
        time.sleep(0.21)
        ActionChains(self.browser).release().perform()
        times = random.uniform(2, 4)
        times = round(times, 1)
        time.sleep(times)
        html = self.browser.page_source
        res = self.check_yanzheng()
        print('检测html是否滑动成功', res)
        if res == True:
            input("成功！")
        else:
            retry_time = 3
            while retry_time > 0:
                try:
                    result = self.again_crack()
                    return result
                except:
                    retry_time -= 1

    def panel_visible(self) -> bool:
        """提供外部调用以确认是否激活了极验验证"""
        panel_next = self.browser.find_element_by_class_name("geetest_success_radar_tip_content")
        return panel_next and panel_next.is_displayed()


if __name__ == '__main__':
    url = 'https://xxx/auth/login'
    user = "xxx"
    pwd = "xxx"
    crack = CrackGeetest(url, user, pwd, "login")
    html_list = crack.crack()
    print(html_list)
