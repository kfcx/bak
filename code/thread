#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import hashlib
import json
import random
import sys
from datetime import datetime

import schedule
import time
import requests

from pprint import pprint
from loguru import logger
from pymongo import MongoClient
from queue import Queue, Empty
from threading import Thread, Event

requests.packages.urllib3.disable_warnings()


class Login(object):
    """
    小米账号登录
    """

    def login_(self, user, pwd):
        session = requests.session()
        pwd = hashlib.md5(pwd.encode()).hexdigest().upper()
        url = "https://account.xiaomi.com/pass/serviceLoginAuth2"
        data = {
            "_json": True,
            "callback": "https://api.m.mi.com/v1/passport/callback",
            "sid": "eshopmobile",
            "qs": "%3Fsid%3Deshopmobile%26_json%3Dtrue",
            "_sign": "=",
            "user": user,
            "hash": pwd,
            "cc": "+86",
        }
        headers = {
            "Cookie": "deviceId=; sdkVersion=4.1.8",
            "User-Agent": "APP/com.xiaomi.mishop APPV/5.2.120 iosPassportSDK/4.1.8 iOS/14.3"
        }
        res = session.post(url=url, params=data, headers=headers, verify=False)
        _ = json.loads(res.text[11:])
        if _["result"] != "error":
            res = session.get(url=_['location'], headers=headers, verify=False)
            if res.json()['desc'] == "成功":
                return requests.utils.dict_from_cookiejar(session.cookies)
        return "login失败"


class MongoDB(object):
    def __init__(self, url, db, collection):
        """
        初始化MongoDB数据库和表的信息并连接数据库
        :param url: 连接名
        :param db: 数据库名
        :param collection: 表名
        """
        # client = motor_asyncio.AsyncIOMotorClient(url)  # 异步
        client = MongoClient(url)  # 同步
        self.db = client[db]  # 数据库
        self.collection = self.db[collection]  # 表

        if db not in client.list_database_names():
            logger.warning("数据库不存在！")
        if collection not in self.db.list_collection_names():
            logger.warning("表不存在！")

    def __str__(self):
        """数据库基本信息"""
        db = self.db._Database__name
        collection = self.collection._Collection__name
        num = self.collection.count_documents({})
        return "数据库{} 表{} 共{}条数据".format(db, collection, num)

    def __len__(self):
        """表的数据条数"""
        return self.collection.count_documents({})

    def count(self):
        """表的数据条数"""
        return len(self)

    def insert(self, *args, table=None, **kwargs):
        """插入多条数据

        :param args: 多条数据，可以是dict、dict的list或dict的tuple
        :param kwargs: 单条数据，如name=XerCis, gender=male
        :return: 添加的数据在库中的_id
        """
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        documents = []
        for i in args:
            if isinstance(i, dict):
                documents.append(i)
            else:
                documents += [x for x in i]
        if kwargs:
            documents.append(kwargs)
        return collection.insert_many(documents)

    def delete(self, *args, table=None, **kwargs):
        """删除一批数据

        :param args: 字典类型，如{"gender": "male"}
        :param kwargs: 直接指定，如gender="male"
        :return: 已删除条数
        """
        # TODO(XerCis) 增加正则表达式
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        list(map(kwargs.update, args))
        result = collection.delete_many(kwargs)
        return result.deleted_count

    def update(self, old, new, table=None):
        """更新一批数据

        :param args: dict类型的固定查询条件如{"author":"XerCis"}，循环查询条件一般为_id列表如[{'_id': ObjectId('1')}, {'_id': ObjectId('2')}]
        :param kwargs: 要修改的值，如country="China", age=22
        :return: 修改成功的条数
        """
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        value = {"$set": new}
        result = collection.update_one(old, value)
        return result.modified_count

    def update_many(self, *args, table=None, **kwargs):
        """更新一批数据

        :param args: dict类型的固定查询条件如{"author":"XerCis"}，循环查询条件一般为_id列表如[{'_id': ObjectId('1')}, {'_id': ObjectId('2')}]
        :param kwargs: 要修改的值，如country="China", age=22
        :return: 修改成功的条数
        """
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        value = {"$set": kwargs}
        query = {}
        n = 0
        list(map(query.update, list(filter(lambda x: isinstance(x, dict), args))))  # 固定查询条件
        for i in args:
            if not isinstance(i, dict):
                for id in i:
                    query.update(id)
                    result = collection.update_one(query, value)
                    n += result.modified_count
        result = collection.update_many(query, value)
        return n + result.modified_count

    def find(self, *args, table=None, **kwargs):
        """保留原接口"""
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        return collection.find(*args, **kwargs)

    def find_all(self, show_id=False, table=None):
        """所有查询结果

        :param show_id: 是否显示_id，默认不显示
        :return:所有查询结果
        """
        if table:
            collection = self.db[table]
        else:
            collection = self.collection

        if not show_id:
            return [i for i in collection.find({}, {"_id": 0})]
        else:
            return [i for i in collection.find({}, table)]

    def find_col(self, *args, table=None, **kwargs):
        """查找某一列数据

        :param key: 某些字段，如"name","age"
        :param value: 某些字段匹配，如gender="male"
        :return:
        """
        if table:
            collection = self.db[table]
        else:
            collection = self.collection
        if args:
            key_dict = {"_id": 0}  # 不显示_id
            key_dict.update({i: 1 for i in args})
            return list(filter(lambda i: i != {}, [i for i in collection.find(kwargs, key_dict, table)]))
        else:
            return []

    def find_one(self, arg, _id=0, table=None):
        _ = {}
        _[arg] = 0
        _['_id'] = _id
        for i in self.find(None, _, table=table):
            if i and i['user'] == arg:
                return i
        return {}


class Tasks(Login, MongoDB, Thread):
    def __init__(self, url, db, collection, user, max_workers):
        super(Login, self).__init__(url, db, collection)
        super(MongoDB, self).__init__()  # 连接数据库

        self.__flag = Event()  # 用于暂停线程的标识
        self.__flag.set()  # 设置为True
        self.__running = Event()  # 用于停止线程的标识
        self.__running.set()  # 将running设置为True

        self.t = []
        self.max_workers = max_workers
        self.session = requests.session()
        self.activity_code = []
        self.user = user
        self.pwd = self.find_one(user, table="user").get("pwd")
        self.cookies = self.find_one(user, table="cookie").get("cookie")
        self.headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0",
            "Referer": "https://m.mi.com/hd/ghd/2021/lwq1229fd45ae/index.html?spmref=MiShop_M.sf_287.5471.5&scmref=sf.0.0.0.0.0.0.0",
        }
        self.print = True

    def get_code(self):
        url = "https://m.mi.com/v1/home/page_struct"
        data = "page_id=287&sign=&client_id=&lat=&lng="
        with requests.post(url=url, headers=self.headers, params=data, cookies=self.cookies, verify=False) as res:
            data = filter(lambda x: x['floor_id'] == 5048, res.json()['data']['floors']).__next__()
            self.activity_code = [a['activity_code'] for a in data['data']['body']['items']]

    def login_check(self, user, pwd):
        self.cookies = self.find_one(user, table="cookie").get("cookie")
        _ = self.get_conf()
        if not _['is_login']:
            logger.warning(f"账号{user}失效,正在重新登录...")
            self.cookies = self.login_(user, pwd)
            _ = self.get_conf()
            if _['is_login']:
                if self.find_one(user, table="cookie").get("cookie"):
                    self.update(self.find_one(self.user, table="cookie"),
                                {"user": self.user, "cookie": self.cookies, "time": time.time()}, table="cookie")
                else:
                    self.insert({"user": self.user, "cookie": self.cookies, "time": time.time()}, table="cookie")
            else:
                logger.error("登录失败")
                return False
        logger.info("账号正常")
        return True

    def local_time(self):
        return time.time()

    def jd_time(self):
        """
        从京东服务器获取时间毫秒
        :return:
        """
        try:
            url = "https://m.mi.com/v1/activity/page_draw"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62"
            }
            start = time.time()
            res = requests.options(url=url, headers=headers, verify=False)
            end = time.time()
            if res.status_code == 200:
                st = float(res.headers.get("Logid")) / 10000
                return start, end, st
            else:
                return 0, 0, 0
        except Exception:
            return 0, 0, 0

    def local_jd_time_diff(self):
        tlist = []
        for i in range(10):
            start, end, st = self.jd_time()
            if start:
                tlist.append(st - end)
            time.sleep(0.1)
        tlist.remove(max(tlist))
        tlist.remove(min(tlist))
        return sum(tlist) / len(tlist)
        # return self.local_time() - self.jd_time()

    def on_time(self, buyt):
        time1 = f'{time.strftime("%Y-%m-%d", time.localtime())} {buyt}'
        t = f'{time.strftime("%Y-%m-%d", time.localtime())} {buyt}'.split('.')
        f = float("." + t[1])
        buy_time_ms = time.mktime(time.strptime(t[0], '%Y-%m-%d %H:%M:%S')) + f
        diff_time = self.local_jd_time_diff()  # 与服务器 延时差
        # diff_time = 0  # 与服务器 延时差
        logger.info('正在等待到达设定时间:{}，检测本地时间与京东服务器时间误差为【{}】毫秒'.format(time1, diff_time))
        flag = True
        while True:
            if (buy_time_ms - (self.local_time() + diff_time)) >= 60:  # 60s
                time.sleep(50)
                if flag:
                    self.login_check(conf.user, conf.pwd)
                    flag = False
            else:  # max 10s
                if (buy_time_ms - (self.local_time() + diff_time)) >= 2:
                    time.sleep(1)
                else:  # max 2s
                    while True:
                        if (buy_time_ms - (self.local_time() + diff_time)) <= 0:
                            # logger.info('时间到达，立即执行……')
                            return True

    def get_conf(self, debug=False):
        url = "https://m.mi.com/v1/newyear2022/index"
        data = "client_id=&req_source=3"
        with requests.post(url=url, headers=self.headers, params=data, cookies=self.cookies, verify=False) as res:
            data = res.json()['data']['global_data']
            if debug:
                pprint(data)
            return data

    def run(self, *args, **kwargs):
        code = kwargs.get("code")
        msg = kwargs.get("msg")
        while self.__running.is_set():
            try:
                # self.pause()
                # self.resume()
                if len(self.t) < self.max_workers or self.state():
                    time.sleep(random.uniform(0.05, 0.1))
                    # self.get_conf()
                    t = Thread(target=self.page_draw, args=(code, msg,))
                    t.start()
                    self.t.append(t)
            except Exception as e:
                # 如果任务失败，自动结束该线程，外层可用方法判断线程是否存活，从而判断任务是否失败。
                # return 方法在线程中不能使用
                self.stop()
                print(e)

    def page_draw(self, activity_code, msg):
        if self.__running.is_set():
            url = "https://m.mi.com/v1/activity/page_draw"
            data = {
                "activity_code": activity_code
            }
            old = time.time()
            with self.session.post(url=url, headers=self.headers, data=data, verify=False, cookies=self.cookies) as res:
                new = time.time()
                msg.setdefault(f"{new}%.3d" % len(self.t), ((new - old), res.text))

    def state(self):
        for i in self.t:
            if not i.is_alive():
                self.t.remove(i)
                return True
        return False

    def pause(self):
        self.__flag.clear()  # 设置为False, 让线程阻塞

    def resume(self):
        self.__flag.set()  # 设置为True, 让线程停止阻塞

    def stop(self):
        self.__flag.set()  # 将线程从暂停状态恢复, 如何已经暂停的话
        self.__running.clear()  # 设置为False


def main(conf, t):
    msg = {}  # 存储请求信息
    conf.login_check(conf.user, conf.pwd)
    conf.get_code()
    code = conf.activity_code[-1]
    kwargs = {
        "msg": msg,
        "code": code,
    }
    ttt = f"{time.localtime(conf.local_time()).tm_hour}:59:{t}"
    # ttt = time.strftime('%H:%M:%S', time.localtime(time.time() + 5)) + ".000000"  # 测试
    conf.on_time(ttt)
    logger.info("run " + ttt)
    t = Thread(target=conf.run, args=(), kwargs=kwargs)
    t.daemon = True
    t.start()
    logger.warning("准备结束")
    conf.stop()
    t.join()
    time.sleep(10)
    for k, v in sorted(msg.items(), reverse=True):
        timetamp = datetime.fromtimestamp(float(k[:-3]))
        print(f"{timetamp} | - {v}")
    logger.info("执行完成")
    print(len(msg))

if __name__ == '__main__':
    para = sys.argv
    if len(para) >= 2:
        t = para[1]
    else:
        t = "59.800000"
    host = '82.'
    port = 36373
    user1 = ""
    pwd = ""
    url1 = f"mongodb://{user1}:{pwd}@{host}:{port}/"
    db = "mi"
    collection = "cookie"
    user = "x"
    max_workers = 10
    conf = Tasks(url1, db, collection, user, max_workers)
    # main(conf, t)
    if time.localtime(conf.local_time()).tm_min >= 55:
        main(conf, t)
    for ttt in ["09:59:00", "14:59:00", "19:59:00"]:
    # for ttt in ["14:59:00"]:
        schedule.every().days.at(ttt).do(main, conf, t)
    logger.info("已开始任务")
    while True:
        schedule.run_pending()
        time.sleep(1)
